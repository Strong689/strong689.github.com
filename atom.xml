<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Step by Step, Learning by Doing]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://strong689.github.com//"/>
  <updated>2015-08-10T06:28:12.260Z</updated>
  <id>http://strong689.github.com//</id>
  
  <author>
    <name><![CDATA[Strong :) Just Code it...]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[O2O]]></title>
    <link href="http://strong689.github.com/2015/08/09/O2O/"/>
    <id>http://strong689.github.com/2015/08/09/O2O/</id>
    <published>2015-08-10T05:30:48.000Z</published>
    <updated>2015-08-10T06:28:12.260Z</updated>
    <content type="html"><![CDATA[<p>Online提高了信息流、资金流、物流的效率，消除了信息不对称，提高了交易的效率，提高用户的消费体验和感受</p>
<blockquote>
<p>商业/贸易<br>  贩卖优质产品，让顾客体验出色服务</p>
</blockquote>
<ul>
<li>Offline to Online</li>
<li>Online to Offline : baidu, Tecent, JD, Alibaba,</li>
<li>融合<br>在移动互联网时代，线上线下相互<strong>融合</strong>，提升消费的新商业模式<br>线上的便利性与线下的体验功能融合</li>
</ul>
<p>example:<br>出境服务的APP“四万公里”: 创始人仇志强说，他们本来是想做一个交易平台，但思考过后决定从工具入手。最初的办法就是通过“最笨”的人力“扫街”，把国外城市的餐馆收录起来，再从各社交网站扫点评。就这样，他们现在拥有近300万POI、1700多万图片、过亿条点评，已经具备一个海外版“大众点评”的雏形。和大众点评相比，后者不可能在海外放太多资源，因为美团和糯米在一边盯着呢。和携程去哪儿相比，他们要靠出境产品或机酒赚钱，不会刻意去盯吃或玩的单品。</p>
<p>顾客细分</p>
<blockquote>
<p>老年人： 养老问题？ 痛点？</p>
</blockquote>
<p>Idea from Traditional existings?</p>
<blockquote>
<p>store:<br> neighboor, nextdoor : </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Online提高了信息流、资金流、物流的效率，消除了信息不对称，提高了交易的效率，提高用户的消费体验和感受</p>
<blockquote>
<p>商业/贸易<br>  贩卖优质产品，让顾客体验出色服务</p>
</blockquote>
<ul>
<li>Offline ]]>
    </summary>
    
      <category term="O2O" scheme="http://strong689.github.com/tags/O2O/"/>
    
      <category term="Offline" scheme="http://strong689.github.com/tags/Offline/"/>
    
      <category term="Online" scheme="http://strong689.github.com/tags/Online/"/>
    
      <category term="Reading" scheme="http://strong689.github.com/categories/Reading/"/>
    
      <category term="Internet Plus" scheme="http://strong689.github.com/categories/Reading/Internet-Plus/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mongodbjs vs mongoosejs]]></title>
    <link href="http://strong689.github.com/2015/08/09/mongodbjs-vs-mongoosejs/"/>
    <id>http://strong689.github.com/2015/08/09/mongodbjs-vs-mongoosejs/</id>
    <published>2015-08-10T05:11:52.000Z</published>
    <updated>2015-08-10T05:17:20.446Z</updated>
    <content type="html"><![CDATA[<h1 id="mongodbjs_vs_mongoosejs">mongodbjs vs mongoosejs </h1><p><a href="http://voidcanvas.com/mongoose-vs-mongodb-native/" target="_blank" rel="external">comparison</a></p>
<h3 id="mongodbjs">mongodbjs</h3><ul>
<li>the native mongodb driver</li>
<li>performance better than mongoose</li>
<li>no schema fixed, e.g. two product, t-shirt vs digital camera<br>different kind of products have different property sets, which require flexible document model  </li>
</ul>
<h3 id="mongoosejs">mongoosejs</h3><ul>
<li>higher level interface to MongoDB, it actually uses mongodb.js</li>
<li>fixed schema, like order, account, </li>
<li>coding level, schema can be easily changed </li>
<li>ODM, object document modeling tool</li>
<li>schema&amp;model instantiate the same object whenever you need to create and save something</li>
<li>development faster than mongodbjs</li>
</ul>
<p>it’s better to <strong>use the mongoDB native drivers while still using mongoose for the good stuff</strong>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="mongodbjs_vs_mongoosejs">mongodbjs vs mongoosejs </h1><p><a href="http://voidcanvas.com/mongoose-vs-mongodb-native/" target="_blank"]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="mongodbjs" scheme="http://strong689.github.com/tags/mongodbjs/"/>
    
      <category term="mongoosejs" scheme="http://strong689.github.com/tags/mongoosejs/"/>
    
      <category term="versus" scheme="http://strong689.github.com/categories/versus/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step Into Vagrant]]></title>
    <link href="http://strong689.github.com/2015/08/02/Step-Into-Vagrant/"/>
    <id>http://strong689.github.com/2015/08/02/Step-Into-Vagrant/</id>
    <published>2015-08-03T04:35:28.000Z</published>
    <updated>2015-08-10T04:53:47.888Z</updated>
    <content type="html"><![CDATA[<p>I have idea about what Vagrant is because a training used it providing a environment long time ago, but thinking how to play it now, the bad is that my memory is empty, now i try to recover those basic things, and step into a little bit with others.</p>
<h2 id="Vagrant"><a href="https://www.vagrantup.com/" target="_blank" rel="external">Vagrant</a></h2><p>Create and configure lightweight, reproducible, and portable development environments<br>Written in Ruby, a computer software that creates and configures <strong>virtual development environments</strong><br>It can be seen as a <strong>higher-level wrapper</strong> around <strong>virtualization software</strong> such as </p>
<ul>
<li>VirtualBox</li>
<li>VMware</li>
<li>KVM </li>
<li>Linux Containers (LXC)</li>
</ul>
<p>and around <strong>configuration management software</strong> such as </p>
<ul>
<li>Ansible</li>
<li>Chef</li>
<li>Salt</li>
<li>Puppet</li>
</ul>
<p>supports server environments like <strong>Amazon EC2</strong> , Natively support <strong>Docker</strong> containers.<br><a href="https://github.com/astaxie/Go-in-Action/blob/master/ebook/zh/01.2.md" target="_blank" rel="external">Refer</a></p>
<h2 id="Act_on">Act on</h2><ul>
<li>for Dev, unify development environment for team</li>
<li>for Ops, standardize same server environment</li>
</ul>
<h3 id="common_commands">common commands</h3><blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init		// initialize </span><br><span class="line">$ vagrant up 		// start vm</span><br><span class="line">$ vagrant halt		// stop vm</span><br><span class="line">$ vagrant reload	// restart vm</span><br><span class="line">$ vagrant ssh 		// access vm by ssh</span><br><span class="line">$ vagrant status	// check vm status</span><br><span class="line">$ vagrant destroy 	// destory current vm</span><br><span class="line">$ vagrant package	// package.box can be distributed</span><br></pre></td></tr></table></figure>
<h3 id="Step_by_Step">Step by Step</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// create vagrantfile</span><br><span class="line">$ vagrant init  // create a box image file on current directory</span><br><span class="line">// add vagrant image </span><br><span class="line">$ vagrant box add hashicorp/precise64 // download from vagrant cloud, Ubuntu OS </span><br><span class="line">// configure vagrantfile</span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">"hashicorp/precise64"</span></span><br><span class="line">end</span><br><span class="line">// launch vagrant</span><br><span class="line">$ vagrant up </span><br><span class="line">// access virtual machine by ssh </span><br><span class="line">$ vagrant ssh  // directory sychronized ( /vagrant of VM &lt;&gt; current directory Vagrantfile located)</span><br></pre></td></tr></table></figure>
<h2 id="Automated_Provisioning">Automated Provisioning</h2><p>automatically install softwares required</p>
<h3 id="step_1">step 1</h3><p>create a Bash script(bootstrap.sh) at directory Vagrantfile located</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//<span class="comment">#!/usr/bin/env bash</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y apache2</span><br><span class="line">rm -rf /var/www</span><br><span class="line">ln -fs /vagrant /var/www</span><br></pre></td></tr></table></figure>
<h3 id="step_2">step 2</h3><p>configure Vagrant </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">"hashicorp/precise64"</span></span><br><span class="line">  config.vm.provision : shell, path: <span class="string">"bootstrap.sh"</span>   //vagrant use shell provisioner </span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="Vagrant_network">Vagrant network</h2><p>allow Host machine access the Vagrant VM<br>forwarded_port map host’s port 4567 to guest’s (VM) port 80.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">"hashicorp/precise64"</span></span><br><span class="line">  config.vm.provision :shell, path: <span class="string">"bootstrap.sh"</span></span><br><span class="line">  config.vm.network :forwarded_port, host: <span class="number">4567</span>, guest: <span class="number">80</span></span><br><span class="line">  // or &gt; config.vm.network : private_network, ip:<span class="string">"192.168.1.101"</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>visit <a href="http://127.0.0.1:4567" target="_blank" rel="external">http://127.0.0.1:4567</a> , access VM after it restarts // <a href="http://192.168.1.101" target="_blank" rel="external">http://192.168.1.101</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vagrant</span> reload // restart VM</span><br></pre></td></tr></table></figure></p>
<h2 id="docker_vs_vagrant">docker vs vagrant</h2><p><a href="http://stackoverflow.com/questions/16647069/should-i-use-vagrant-or-docker-io-for-creating-an-isolated-environment" target="_blank" rel="external">comparison 1</a><br><a href="https://medium.com/@_marcos_otero/docker-vs-vagrant-582135beb623" target="_blank" rel="external">comparison 2</a><br><a href="https://www.scriptrock.com/articles/docker-vs-vagrant" target="_blank" rel="external">comparison 3</a></p>
<ul>
<li>Vagrant </li>
</ul>
<blockquote>
<p>for development stage, allow you to install all you need to develop your application in an easy and simple way<br>  a virtual machine manager, it allows you to script the virtual machine configuration as well as the provisioning. However, it is still a virtual machine depending on Virtual Box (or others) with a huge overhead. It requires you to have a hard drive file that can be huge, it takes a lot of ram, and performance can be not very good.</p>
</blockquote>
<ul>
<li>Docker </li>
</ul>
<blockquote>
<p>for production stage, a technology that allows you to run self-contained applications eliminating worries about dependencies and libraries<br>  uses kernel cgroup and namespacing via lxc. It means that you are using the same kernel as the host and the same file system. You can use Dockerfile with the docker build command in order to handle the provisioning and configuration of your container. You have example at docs.docker.com on how to make your Dockerfile, it is very intuitive.</p>
</blockquote>
<p>The only reason you could want to use vagrant is if you need to do BSD, Windows or other non-linux development on your ubuntu box. Otherwise, go for Docker.</p>
<h2 id="docker_&amp;_vagrant_complementing_each_other">docker &amp; vagrant complementing each other</h2><ol>
<li>Install a Vagrant virtual machine in your computer containing the same OS you will have in your server ( normally Ubuntu Linux 12.04 LTS 64 bits). This means that you can program in any OS you want and still expect your program will run in your server.</li>
<li>Install your Docker packages to create Docker containers inside your virtual machine created for Vagrant. This step is better if you can install them through an script.</li>
<li>Inside your containers put your applications ( Nginx, Memcached, MongoDB, etc)</li>
<li>Configure a shell script, Puppet or Chef script to install Docker and run your Docker containers each time Vagrant begins.</li>
<li>Test your containers in your Vagrant VM inside your computer.</li>
<li>Thanks to providers now you can take the same file ( your Vagrant file ) and just type vagrant up —provider=“provider” where the provider is your next host and Vagrant will take care of everything. For example, if you choose AWS then Vagrant will: Connect to your AMI in AWS, install the same OS you used in your computer, install Docker, launch your Docker containers and give you a ssh session.</li>
<li>Test your containers in AWS and look that they behave exactly as you expect.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>I have idea about what Vagrant is because a training used it providing a environment long time ago, but thinking how to play it now, the ]]>
    </summary>
    
      <category term="Docker" scheme="http://strong689.github.com/tags/Docker/"/>
    
      <category term="VM" scheme="http://strong689.github.com/tags/VM/"/>
    
      <category term="Vagrant" scheme="http://strong689.github.com/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Today's reading of MongoDB]]></title>
    <link href="http://strong689.github.com/2015/08/01/Today-s-reading-of-MongoDB/"/>
    <id>http://strong689.github.com/2015/08/01/Today-s-reading-of-MongoDB/</id>
    <published>2015-08-01T17:05:21.000Z</published>
    <updated>2015-08-10T05:07:52.415Z</updated>
    <content type="html"><![CDATA[<p>something about,<br>embedded documents<br>atomicity and transaction<br>$isolated operator</p>
<h3 id="two-phase_commit">two-phase commit</h3><p>only transaction-like for multiple document<br>multi-document transaction, rollback-like functionality, not really an all or nothing transaction</p>
<ul>
<li>atomicity, rollback previous state</li>
<li>consistency, consistent state recovery<br>intermediate data presentation</li>
</ul>
<p>concurrency control : two approach, unique index, update if current</p>
<h3 id="Update_if_current_pattern">Update if current pattern</h3><p>an approach to currency control for multiple clients operate the same data</p>
<h3 id="version_pattern">version pattern</h3><blockquote>
<p>variant : <strong>version pattern</strong> , similar to Update if current pattern<br>  to add an version field to document schema, application/client need increment the version field upon each update operation to a specific document.<br>  version field can be set 1 as default value for a document creation / insert operation. </p>
</blockquote>
<p>it need ensure client application query data including the version field.</p>
<p>version can be implemented by “auto-incrementing sequence” field</p>
<h2 id="SQL2Mongo">SQL2Mongo</h2><p><a href="https://mssql2mongo.codeplex.com/" target="_blank" rel="external">SQL2Mongo</a> : tool to migrate all schema and data from MSSQL to mongodb, </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>something about,<br>embedded documents<br>atomicity and transaction<br>$isolated operator</p>
<h3 id="two-phase_commit">two-phase commit<]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step Into Write Concern of MongoDB]]></title>
    <link href="http://strong689.github.com/2015/07/27/Step-Into-Write-Concern-of-MongoDB/"/>
    <id>http://strong689.github.com/2015/07/27/Step-Into-Write-Concern-of-MongoDB/</id>
    <published>2015-07-28T05:22:09.000Z</published>
    <updated>2015-07-28T06:18:50.054Z</updated>
    <content type="html"><![CDATA[<p>Write concern is a balance between response time(performance) and the success of a write operation(Reliability).<br>Write includes insert, udpate and delete.<br>A weak write concern: write operations return quickly, but data maybe not persist well(including replica set).<br>A strong write concern: clients wait after mongodb confirm the write operation suncessful.</p>
<h3 id="Levels">Levels</h3><p>listed from weakest to strongest</p>
<ul>
<li><p>Unacknowledged {W:0}</p>
<blockquote>
<p>similar to errors ignored</p>
</blockquote>
</li>
<li><p>Acknowledged {W:1}<br>used in writing unimportant data, e.g. some operation log, user’s behavior(click, time staying in one page)</p>
<blockquote>
<p>default write concern<br>the mongod confirms that it received the write operation and applied the change to the in-memory view of data<br>allows clients to catch network, duplicate key, and other errors<br>does not confirm that the write operation has persisted to the disk system  </p>
</blockquote>
</li>
<li><p>Journaled {w:1,j:true}<br>used in writing key, business data, e.g. order, account </p>
<blockquote>
<p>committing the data to the journal(journaling enabled first)<br>ensures that MongoDB can recover the data following a shutdown or power interruption  </p>
</blockquote>
</li>
<li><p>Replica Acknowledged {w:2}</p>
<blockquote>
<p>guarantee write sucessfully to one Replica Set beside the primary</p>
</blockquote>
</li>
</ul>
<h3 id="Timeouts">Timeouts</h3><ul>
<li>set at client side</li>
<li>wtimeout: in milliseconds</li>
<li>wtimeout causes write operations to return with an error after the specified limit, even if the required write concern will eventually succeed</li>
<li>MongoDB does not “rollback” or undo modifications made before the wtimeout interval expired</li>
</ul>
<h3 id="getLastError()">getLastError()</h3><p>Driver implicitly and immediately call this method after one write operation<br>depending on level of Write Corcern</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//after insert(), implicitly call db.getLastError(); if capturing error, assign it to err of callback function.</span></span><br><span class="line"><span class="comment">// when w:-1, err is always null</span></span><br><span class="line"><span class="comment">// when w:0, except network error, normally no other error can be captured</span></span><br><span class="line"><span class="comment">// when w:1, return error from mongod to err parameter</span></span><br><span class="line">db.collection(<span class="string">"test"</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</span><br><span class="line">    collection.insert(&#123;		</span><br><span class="line">        name: <span class="string">"world peace"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>Write concern is a balance between response time(performance) and the success of a write operation(Reliability).<br>Write includes insert]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/tags/Step-Into/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/Step-Into/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/Step-Into/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step Into MongoDB Query Operators]]></title>
    <link href="http://strong689.github.com/2015/07/26/Step-Into-MongoDB-Query-Operators/"/>
    <id>http://strong689.github.com/2015/07/26/Step-Into-MongoDB-Query-Operators/</id>
    <published>2015-07-27T03:50:27.000Z</published>
    <updated>2015-07-28T06:18:55.850Z</updated>
    <content type="html"><![CDATA[<h2 id="Comparison_Operator">Comparison Operator</h2><table>
<thead>
<tr>
<th>Operator</th>
<th style="text-align:center">JavaScript</th>
<th style="text-align:center">Example</th>
<th style="text-align:center">js Example</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>$eq</td>
<td style="text-align:center">==</td>
<td style="text-align:center">{field:{$eq:value}}</td>
<td style="text-align:center">a == b</td>
<td style="text-align:center">equal to a specified value(js: === )</td>
</tr>
<tr>
<td>$gt</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">{field:{$gt:value}}</td>
<td style="text-align:center">a &gt; b</td>
<td style="text-align:center">greater than</td>
</tr>
<tr>
<td>$gte</td>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">{field:{$gte:value}}</td>
<td style="text-align:center">a &gt;= b</td>
<td style="text-align:center">greater than or equal to</td>
</tr>
<tr>
<td>$lt</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">{field:{$lt:value}}</td>
<td style="text-align:center">a &lt; b</td>
<td style="text-align:center">less than</td>
</tr>
<tr>
<td>$lte</td>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">{field:{$lte:value}}</td>
<td style="text-align:center">a &lt;= b</td>
<td style="text-align:center">less than or equal to</td>
</tr>
<tr>
<td>$ne</td>
<td style="text-align:center">!=</td>
<td style="text-align:center">{field:{$ne:value}}</td>
<td style="text-align:center">a != b</td>
<td style="text-align:center">not equal to</td>
</tr>
<tr>
<td>$in</td>
<td style="text-align:center">n/a</td>
<td style="text-align:center">{field:{$in:[<value1>, … <valuen>]}}</valuen></value1></td>
<td style="text-align:center">n/a</td>
<td style="text-align:center">Matches any of the values specified in an array</td>
</tr>
<tr>
<td>$nin</td>
<td style="text-align:center">n/a</td>
<td style="text-align:center">{field:{$nin:[<value1>, … <valuen>]}}</valuen></value1></td>
<td style="text-align:center">n/a</td>
<td style="text-align:center">Matches none of the values specified in an array</td>
</tr>
</tbody>
</table>
<p>Examples<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">return</span> all account documents with name <span class="string">"Strong"</span></span><br><span class="line">db.account.find(&#123;name:&#123;<span class="variable">$eq</span>:<span class="string">"Strong"</span>&#125;&#125;); </span><br><span class="line">//ruturn all accounts whose age are less than <span class="number">18</span></span><br><span class="line">db.account.find(&#123;age:&#123;<span class="variable">$lte</span>:<span class="number">18</span>&#125;&#125;);		</span><br><span class="line">//Return all documents <span class="keyword">in</span> the inventory collection <span class="built_in">where</span> the quantity does not equal <span class="number">5</span> nor <span class="number">15</span></span><br><span class="line">db.inventory.find(&#123;quantity:&#123;<span class="variable">$nin</span>:[<span class="number">5</span>, <span class="number">15</span>]&#125;&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Logical_Operator">Logical Operator</h2><table>
<thead>
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">JavaScript</th>
<th style="text-align:center">Example</th>
<th style="text-align:center">js Example</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$and</td>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">{$and:[{},…{expressionN}]}</td>
<td style="text-align:center">x &lt; a &amp;&amp; x &gt; b</td>
<td style="text-align:center">and, match the conditions of both clauses</td>
</tr>
<tr>
<td style="text-align:center">$or</td>
<td style="text-align:center">OR</td>
<td style="text-align:center">{$or:[{},…{expressionN}]}</td>
<td style="text-align:center">x &lt; a OR x &gt; b</td>
<td style="text-align:center">or, match the conditions of either clause</td>
</tr>
<tr>
<td style="text-align:center">$not</td>
<td style="text-align:center">!</td>
<td style="text-align:center">{$not:[{},…{expressionN}]}</td>
<td style="text-align:center">!(x == y)</td>
<td style="text-align:center">not, do not match the query expression</td>
</tr>
<tr>
<td style="text-align:center">$nor</td>
<td style="text-align:center">n/a</td>
<td style="text-align:center">{$nor:[{},…{expressionN}]}</td>
<td style="text-align:center">n/a</td>
<td style="text-align:center">Joins query clauses with a logical NOR returns all documents that fail to match both clauses</td>
</tr>
</tbody>
</table>
<p>NOTE: OR stands for || for js opeator above.</p>
<h3 id="$and_example">$and example</h3><p>$and performs a logical AND operation on an array of two or more expressions and selects the documents that satisfy all the expressions in the array<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//AND query with multiple expressions </span><br><span class="line">db.inventory.find(&#123;<span class="variable">$and</span>:[&#123;price:&#123;<span class="variable">$ne</span>:<span class="number">1.99</span>&#125;&#125;,&#123;price:&#123;<span class="variable">$exists</span>:<span class="literal">true</span>&#125;&#125;]&#125;);</span><br><span class="line">//implicit AND operation</span><br><span class="line">db.inventory.find(&#123;price:&#123;<span class="variable">$ne</span>:<span class="number">1.99</span>,<span class="variable">$exists</span>:<span class="literal">true</span>&#125;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>This query will select all documents in the inventory collection where:  </p>
<ul>
<li>the price field value is not equal to 1.99 <strong>and</strong></li>
<li>the price field exists.</li>
</ul>
<h3 id="$nor_example">$nor example</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//query with two expressions</span><br><span class="line">db.inventory.find(&#123;<span class="variable">$nor</span>:[&#123;price:<span class="number">19.99</span>&#125;,&#123;isSale:<span class="literal">true</span>&#125;]&#125;);</span><br></pre></td></tr></table></figure>
<p>This query will return all documents that:</p>
<ul>
<li>contain the <strong>price</strong> field whose value is not equal to 19.99 and contain the <strong>isSale</strong> field whose value is not equal to true <strong>or</strong></li>
<li>contain the <strong>price</strong> field whose value is not equal to 19.99 but do not contain the <strong>isSale</strong> field <strong>or</strong></li>
<li>do not contain the <strong>price</strong> field but contain the <strong>isSale</strong> field whose value is not equal to true <strong>or</strong></li>
<li>do not contain the <strong>price</strong> field and do not contain the <strong>isSale</strong> field</li>
</ul>
<h2 id="Field_Check_Operator">Field Check Operator</h2><h3 id="$exists">$exists</h3><p>Matches documents that have the specified field, {field: {$exists:boolean value}}  .<br>When boolean value is true, $exists matches the documents that contain the field, including documents where the field value is null. If boolean value is false, the query returns only the documents that do not contain the field.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.find(&#123;quanity:&#123;<span class="variable">$exists</span>:<span class="literal">true</span>, <span class="variable">$nin</span> : [<span class="number">5</span>,<span class="number">15</span>] &#125;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="$type">$type</h3><p>$type selects the documents where the value of the field is an instance of the specified numeric BSON type.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(&#123;field:&#123;<span class="variable">$type</span>:n&#125;);</span><br></pre></td></tr></table></figure></p>
<p>NOTE: </p>
<blockquote>
<p>n stands for numeric BSON type<br>  1 for Double<br>  2 for String<br>  3 Object<br>  4 Array<br>  7 ObjectId<br>  8 Boolean<br>  9 Date<br>  10 Null<br>  11 Regular Expression<br>  13 JavaScript<br>  15 js with scope<br>  16 32 bit integer<br>  17 timestamp<br>  18 64 bit integer<br>  255 Min key(but query with -1)<br>  127 Max key</p>
</blockquote>
<h2 id="Operator_for_Array">Operator for Array</h2><h3 id="$all">$all</h3><p>Match arrays that contain all elements specified in the query<br>Like SQL’s in operator, the difference is that $all must match all values within [], but in can only match any one value within ().<br>{field:{$all:[value1, … valueN]}}</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// </span><br><span class="line">db.accounts.find(&#123;age : &#123;<span class="variable">$all</span> : [<span class="number">16</span>, <span class="number">17</span>]&#125;&#125;);</span><br><span class="line">// &#123;name: <span class="string">'Jobs'</span>, age: <span class="number">26</span>, age: [ <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span> ] &#125; : can<span class="string">'t match</span><br><span class="line">// &#123;name: '</span>Bill<span class="string">', age: 26, age: [ 16, 17, 19 ] &#125; : match</span><br><span class="line">	</span><br><span class="line">###elemMatch</span><br><span class="line">The $elemMatch operator matches documents that contain an array field with at least one element that matches all the specified query criteria.</span><br><span class="line">&gt; Format: &#123; &lt;field&gt;: &#123; $elemMatch: &#123; &lt;q1&gt;, &lt;q2&gt;, ... &#125; &#125; &#125;</span><br><span class="line">  It does not need touse $elemMatch operator for single query condition </span><br><span class="line"></span><br><span class="line">````bash</span><br><span class="line">//collection scores</span><br><span class="line">&#123; _id: 1, results: [ 82, 85, 88 ] &#125;</span><br><span class="line">&#123; _id: 2, results: [ 75, 88, 89 ] &#125;</span><br><span class="line">// match element </span><br><span class="line">db.scores.find( &#123; results: &#123; $elemMatch: &#123; $gte: 80, $lt: 85 &#125; &#125; &#125; )</span><br><span class="line"></span><br><span class="line">//collection survey</span><br><span class="line">&#123; _id: 1, results: [ &#123; product: "abc", score: 10 &#125;, &#123; product: "xyz", score: 5 &#125; ] &#125;</span><br><span class="line">&#123; _id: 2, results: [ &#123; product: "abc", score: 8 &#125;, &#123; product: "xyz", score: 7 &#125; ] &#125;</span><br><span class="line">&#123; _id: 3, results: [ &#123; product: "abc", score: 7 &#125;, &#123; product: "xyz", score: 8 &#125; ] &#125;</span><br><span class="line">//match embeded documents</span><br><span class="line">db.survey.find(&#123;results:&#123;$elemMatch:&#123;product:"xyz", score:&#123;$gte:8&#125;&#125;&#125;&#125;);</span></span><br></pre></td></tr></table></figure>
<h3 id="$size">$size</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">return</span> all documents <span class="keyword">in</span> collection <span class="built_in">where</span> **field** is an array with N elements</span><br><span class="line">db.collection.find(&#123;field:&#123;<span class="variable">$size</span>:<span class="number">2</span>&#125;&#125;);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">##More on query</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###Null</span></span><br><span class="line">understand it by a sample **employee** collection</span><br><span class="line">&gt; &#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"name"</span> : <span class="string">"Strong"</span>, <span class="string">"age"</span> : null &#125;  // age is a NULL value</span><br><span class="line">  &#123; <span class="string">"_id"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="string">"Jacky"</span>, <span class="string">"age"</span> : <span class="number">33</span> &#125;</span><br><span class="line">  &#123; <span class="string">"_id"</span> : <span class="number">3</span>, <span class="string">"name"</span> : <span class="string">"Garry"</span>, <span class="string">"addr"</span> : <span class="number">38</span> &#125;	 // no age field</span><br><span class="line"></span><br><span class="line">````bash</span><br><span class="line">db.employee.find(&#123;age:null&#125;);  // <span class="built_in">return</span> Garry &amp; Strong</span><br><span class="line">// only <span class="built_in">return</span> Strong</span><br><span class="line">db.employee.find(&#123;age:&#123;<span class="variable">$in</span>:null,<span class="variable">$exists</span>:<span class="literal">true</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="$where">$where</h3><p>$where provides flexibility<br>use the $where operator to pass either a string containing a JavaScript expression or a full JavaScript function to the query system<br>cannot take advantage of indexes  </p>
<blockquote>
<p>different expression, same result<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.employee.find(&#123;age:&#123;$gt:<span class="number">35</span>&#125;&#125;);</span><br><span class="line"><span class="comment">//Reference the document in the JavaScript expression or function using either **this** or **obj**</span></span><br><span class="line">db.employee.find(&#123;$where:<span class="string">"this.age &gt; 35"</span>&#125;); </span><br><span class="line">db.employee.find(<span class="string">"this.age&gt;35"</span>);</span><br><span class="line"></span><br><span class="line">fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.age &gt; <span class="number">35</span>&#125;;</span><br><span class="line">db.employee.find(fn);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="sort">sort</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.employee.find().sort(&#123;age:<span class="number">1</span>&#125;);  <span class="comment">//ascending sequence by age,  yourger first</span></span><br><span class="line">db.employee.find().sor(&#123;age:-<span class="number">1</span>&#125;);  <span class="comment">//descending order by age, older first</span></span><br></pre></td></tr></table></figure>
<h3 id="skip_&amp;_limit">skip &amp; limit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.employee.find().skip(<span class="number">10</span>).limit(<span class="number">20</span>); // <span class="built_in">return</span> <span class="number">20</span> records from the tenth record</span><br></pre></td></tr></table></figure>
<h3 id="$mod">$mod</h3><blockquote>
<p>Format: { field: { $mod: [ divisor, remainder ] } }</p>
</blockquote>
<h3 id="$regex">$regex</h3><p>regular expression</p>
<blockquote>
<p>Syntax:<br>  { <field>: { $regex: /pattern/, $options: ‘<options>‘ } }<br>  { <field>: { $regex: ‘pattern’, $options: ‘<options>‘ } }<br>  { <field>: { $regex: /pattern/<options> } }</options></field></options></field></options></field></p>
</blockquote>
<p><strong>need more steps</strong></p>
<h3 id="$text">$text</h3><p>$text performs a text search on the content of the fields indexed with a text index. </p>
<blockquote>
<p>Syntax:  { $text: { $search: <string>, $language: <string> } }</string></string></p>
</blockquote>
<p><strong>need more steps</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Comparison_Operator">Comparison Operator</h2><table>
<thead>
<tr>
<th>Operator</th>
<th style="text-align:center">JavaScript</th>
<t]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Query Operator" scheme="http://strong689.github.com/tags/Query-Operator/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/tags/Step-Into/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/MongoDB/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/MongoDB/Step-Into/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[User Story vs Use Case]]></title>
    <link href="http://strong689.github.com/2015/07/22/User-Story-vs-Use-Case/"/>
    <id>http://strong689.github.com/2015/07/22/User-Story-vs-Use-Case/</id>
    <published>2015-07-23T06:35:08.000Z</published>
    <updated>2015-07-23T07:05:57.830Z</updated>
    <content type="html"><![CDATA[<p>Thought: use “user story” with acceptance criteria is a best practice in scrum process, no one use “use case”.</p>
<h3 id="User_story">User story</h3><p><strong>lightweight</strong>  </p>
<blockquote>
<p> a short description of something that can be written on a card,<br>   focused on the value or result they get from doing this thing<br>   Format: As an [actor] I want [action] so that [achievement]<br>   A User Story doesn’t capture all the details, it’s an informal support for the discussion.  </p>
</blockquote>
<h3 id="Acceptance_criteria">Acceptance criteria</h3><p>Writing the acceptance criteria is the first step of fleshing out the details of your user story.</p>
<blockquote>
<p>define the boundaries of a user story, and are used to confirm when a story is completed and working as intended</p>
</blockquote>
<p>example  </p>
<blockquote>
<p>As a conference attendee, I want to be able to register online, so I can register quickly and cut down on paperwork, the acceptance criteria could include:  </p>
<ol>
<li>A user cannot submit a form without completing all the mandatory fields</li>
<li>Information from the form is stored in the registrations database</li>
<li>Protection against spam is working</li>
<li>Payment can be made via credit card</li>
<li>An acknowledgment email is sent to the user after submitting the form.</li>
</ol>
</blockquote>
<h3 id="Use_case">Use case</h3><p><strong>heavyweight</strong><br>use case describes a “Normal Flow” of steps and/or actions and “Alternative Flows” which are detailed. </p>
<blockquote>
<p>formal specification, usually created as a formal document, detail description of a set of interactions between a system and and one or more roles, roles can be people or systems, including something as below, </p>
<ul>
<li>Use case title</li>
<li>Rationale/description/goal</li>
<li>Actor/user</li>
<li>Preconditions (the things that must have already happened in the system)</li>
<li>Standard path or Main success scenario (what will usually happen, described as a series of steps)</li>
<li>Alternate paths or Extensions(variations on the above/edge cases)</li>
<li>Post conditions (what the system will have done by the end of the steps). </li>
</ul>
</blockquote>
<p><a href="http://www.boost.co.nz/blog/2012/01/use-cases-or-user-stories/" target="_blank" rel="external">resource</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Thought: use “user story” with acceptance criteria is a best practice in scrum process, no one use “use case”.</p>
<h3 id="User_story">Us]]>
    </summary>
    
      <category term="Use Case" scheme="http://strong689.github.com/tags/Use-Case/"/>
    
      <category term="User Story" scheme="http://strong689.github.com/tags/User-Story/"/>
    
      <category term="Thought" scheme="http://strong689.github.com/categories/Thought/"/>
    
      <category term="Scrum" scheme="http://strong689.github.com/categories/Thought/Scrum/"/>
    
      <category term="Agile" scheme="http://strong689.github.com/categories/Thought/Scrum/Agile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thought in Software Engineering Process]]></title>
    <link href="http://strong689.github.com/2015/07/22/Thought-in-Software-Engineering-Process/"/>
    <id>http://strong689.github.com/2015/07/22/Thought-in-Software-Engineering-Process/</id>
    <published>2015-07-23T06:31:30.000Z</published>
    <updated>2015-07-23T06:36:31.438Z</updated>
    <content type="html"><![CDATA[<p>Team work is a must practice to achieve a big software developing goal today, there are many people involved in same project,  a bunch of tools make good cooperation, better communication, </p>
<ul>
<li>Infrastructure support: ESB, MQ, …</li>
<li>projecct management, scheoudule, execution</li>
<li>engineering process tool</li>
<li>requirement specification: trace change</li>
<li>design document</li>
<li>IDE: VS Studio, sublime, webstorm, text editor,</li>
<li>testing case</li>
<li>software quality tools</li>
<li>maintenanec - refactor, re-engineering</li>
<li>Configurationn and deployment tools</li>
<li>modern communication tool: email, live meeting, screen share,..</li>
<li>prototying method </li>
<li>agile/ scrum </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Team work is a must practice to achieve a big software developing goal today, there are many people involved in same project,  a bunch of]]>
    </summary>
    
      <category term="Communication" scheme="http://strong689.github.com/tags/Communication/"/>
    
      <category term="Software Engineering Process" scheme="http://strong689.github.com/tags/Software-Engineering-Process/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step Into mongo shell]]></title>
    <link href="http://strong689.github.com/2015/07/22/Step-Into-mongo-shell/"/>
    <id>http://strong689.github.com/2015/07/22/Step-Into-mongo-shell/</id>
    <published>2015-07-23T03:42:19.000Z</published>
    <updated>2015-07-23T03:52:59.535Z</updated>
    <content type="html"><![CDATA[<p>Tips: retrieve previous commands issued in shell with up or down arrow key (Windows something like, C:\Users\myaccount.dbshell)</p>
<h3 id="Start_Shell">Start Shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//start shell without connection to a database</span><br><span class="line">mongo --nodb </span><br><span class="line"></span><br><span class="line">//execute js file</span><br><span class="line">mongo localhost:<span class="number">27017</span>/<span class="built_in">test</span>DB file.js</span><br><span class="line">//alternative use load  <span class="keyword">function</span> n the shell</span><br><span class="line">load(<span class="string">"file.js"</span>)  // execute js, file.js located on <span class="string">"data"</span> directory</span><br></pre></td></tr></table></figure>
<h3 id="Basic_commands">Basic commands</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">use &lt;db_name&gt;				// switch current db to db_name</span><br><span class="line">show dbs / databases 		// list all databases on server</span><br><span class="line">show collections / tables   // list all tables on current db</span><br><span class="line">db or db.getName)			// show current db <span class="keyword">in</span> shell</span><br><span class="line">// </span><br><span class="line">show roles					// list all roles of current db</span><br><span class="line">show users					// list all users of current db</span><br><span class="line">show profile</span><br><span class="line">//how to get <span class="built_in">command</span> reference <span class="keyword">in</span> the shell</span><br><span class="line"><span class="built_in">help</span> or db.help() or db.collection.help()</span><br><span class="line"> </span><br><span class="line">//database can created automatically when saving data to MongoDB <span class="keyword">in</span> shell</span><br><span class="line">//Delete a database</span><br><span class="line">db.dropDatabase()		//drop current dtabase, delete all associated files </span><br><span class="line">//Delete a collection</span><br><span class="line">db.collection.drop()	//remove table and index</span><br><span class="line">//running <span class="keyword">in</span> secure mode</span><br><span class="line">db.auth()				//authenticate user</span><br><span class="line">// refer to another database using same connection</span><br><span class="line">db.getSiblingDB();		//without explicitly switch the current database</span><br></pre></td></tr></table></figure>
<h3 id="CRUD_at_mongo_shell">CRUD at mongo shell</h3><h4 id="Overview">Overview</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">table = db.myCollection;	//table refer a specific collection</span><br><span class="line">table.find(); 				//<span class="built_in">return</span> a cursor</span><br><span class="line">table.findOne();			//<span class="built_in">return</span> a single document or null</span><br><span class="line">table.count();				//count of documents</span><br><span class="line">table.save();				//insert new or update existing document</span><br><span class="line">table.insert();				//insert new document</span><br><span class="line">table.update();				//update existing document</span><br><span class="line">table.remove();				//delete existing document</span><br><span class="line">//build index</span><br><span class="line">table.createIndex();</span><br></pre></td></tr></table></figure>
<h4 id="Create&amp;Update">Create&amp;Update</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//Loop samples <span class="keyword">in</span> shell</span><br><span class="line">use my		//switch current db to my</span><br><span class="line"><span class="keyword">for</span>( var i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++) db.my.save(&#123;tag:<span class="string">"number"</span>,val:i&#125;);</span><br><span class="line"><span class="keyword">for</span>( var i=<span class="number">201</span>;i&lt;=<span class="number">250</span>;i++) db.my.save(&#123;tag:i&#125;);</span><br><span class="line">//it <span class="built_in">command</span></span><br><span class="line">it			//iterate cursor</span><br><span class="line">//Loop to <span class="built_in">return</span> all </span><br><span class="line">var cursor = db.my.find();</span><br><span class="line">//method I</span><br><span class="line"><span class="keyword">while</span>( cursor.hasNext()) &#123;</span><br><span class="line">	printjson(cursor.next());	</span><br><span class="line">&#125;</span><br><span class="line">//method II</span><br><span class="line">cursor.forEach(printjson);</span><br><span class="line">//method III</span><br><span class="line">var myArray = db.my.find().toArray();</span><br><span class="line">printjson(myArray[<span class="number">2</span>]);</span><br><span class="line">//update</span><br><span class="line">db.my.update(&#123;val:<span class="number">6</span>&#125;,&#123;<span class="variable">$set</span>:&#123;tag:<span class="string">"NUMBER"</span>&#125;&#125;);</span><br><span class="line">// to very update</span><br><span class="line">db.my.find().limit(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Query">Query</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//SQL: select tag, val from my <span class="built_in">where</span> tag = <span class="string">"number"</span></span><br><span class="line">db.my.find(&#123;tag:<span class="string">"number"</span>&#125;).count();</span><br><span class="line">db.my.find(&#123;tag:<span class="string">"number"</span>&#125;,&#123;val:<span class="literal">true</span>,tag:<span class="literal">true</span>&#125;).limit(<span class="number">16</span>);</span><br><span class="line">db.my.findOne(&#123;tag:<span class="string">"number"</span>&#125;,&#123;val:<span class="literal">true</span>&#125;);</span><br><span class="line">db.my.find(&#123;tag:<span class="string">"number"</span>&#125;,&#123;val:<span class="literal">true</span>,tag:<span class="literal">true</span>&#125;).forEach(printjson);</span><br><span class="line">//SQL: select * from my <span class="built_in">where</span> tag &gt; <span class="number">200</span></span><br><span class="line">db.my.find(&#123;tag:&#123;<span class="variable">$gt</span>:<span class="number">200</span>&#125;&#125;).forEach(printjson);</span><br></pre></td></tr></table></figure>
<h4 id="Delete">Delete</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//remove() <span class="keyword">function</span></span><br><span class="line">db.my.remove(&#123;tag:<span class="string">"NUMBER"</span>&#125;);</span><br><span class="line">// to verify</span><br><span class="line">db.my.find().limit(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>Tips: retrieve previous commands issued in shell with up or down arrow key (Windows something like, C:\Users\myaccount.dbshell)</p>
<h3 i]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="mongo shell" scheme="http://strong689.github.com/categories/mongo-shell/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/mongo-shell/Step-Into/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Entrepreneur Comments]]></title>
    <link href="http://strong689.github.com/2015/07/21/entrepreneur-comments/"/>
    <id>http://strong689.github.com/2015/07/21/entrepreneur-comments/</id>
    <published>2015-07-21T07:15:53.000Z</published>
    <updated>2015-07-21T07:24:56.854Z</updated>
    <content type="html"><![CDATA[<h2 id="猎豹CEO傅盛：如何做好创业公司CEO？">猎豹CEO傅盛：如何做好创业公司CEO？</h2><p>创业的最大难度是太自由，而容易失去方向。但是，当给出一个固定性问题，或者说封闭式、有区间问题，难度会大幅度下降。如何做好一家创业公司的CEO，傅盛的答案是“能把创业情怀变成具体问题”，而且这个问题越具体越好。” 傅盛总结称，创业，要像做一道数学题一样。</p>
<blockquote>
<p>首先，想清楚目标，然后立刻做。反复就一个封闭式问题，来回推演。一旦具备这样的能力，创业就开始变得简单。<br>  其次，有解是最难的一件事情。那种你想清楚一个问题，执行就开始变得简单的过程，而不是一种强烈依赖于强大的执行的状态。<br>  第三，目标应当简单、聚焦，且被验证。</p>
</blockquote>
<p>作为一个创业者应当，在自己的思维里，能够把开放式问题变成封闭式问题;在这个过程中，不断根据变化极快的世界重构自己;大方向上，抓住具体机会，然后全力以赴。</p>
<h2 id="李想16年的创业分享：做正确的事，不做容易的事">李想16年的创业分享：做正确的事，不做容易的事</h2><p>经验一：用户永远是最重要的<br>经验二：大势不好，再努力也没用(雷军 风口理论)<br>经验三：创业一定要找到能成“NO.1”的领域<br>经验四：把握用户的要素，需求和频率，以及信任感<br>经验五：团队管理，企业文化不应该需要解释<br>经验六：商业模式的建立，圈地—产品—运营—商业<br>经验七：升级商业模式，抓住三个特点</p>
<blockquote>
<p>掌握你的用户和行为数据，只掌握用户是没有用的<br>  第二个因素，必须掌控交易和服务质量<br>  第三点，利用用户的行为数据和交易数据，用技术提升效率，形成这么一个闭环</p>
</blockquote>
<p>经验八：提高转化率要理顺交易链条，把握核心环节</p>
<blockquote>
<p>第一个竞争力，我们所有用户虽然能在网上买车，但是要电话咨询，而且几乎100%都要咨询<br>  第二个是有明确需求的人<br>  第三类的用户，我在两个车里不知道选哪一个，你给我一个建议，同时你帮我把这个车买了，这是解决基本需求</p>
</blockquote>
<p>经验九：产品服务决定销量，品牌决定利润率<br>经验十：创始人需要具备的五项特质</p>
<blockquote>
<p>学习能力是第一重要的<br>  第二个要有自信<br>  第三个通俗一点的叫出好题，说白了，要把战略方向先搞的特别清楚，因为越简单有效清晰的战略，会让团队的效率大幅度提升。<br>  第四点，要坚持，如果不坚持，什么都白搭了<br>  最后一个要分享利益，懂得跟团队去分享利益</p>
</blockquote>
<h2 id="大部分创业者都被自己坑了（滴滴打车）">大部分创业者都被自己坑了（滴滴打车）</h2><p>第一个坑，是你自己， 要对商业有自己的价值判断，这是创业者必备的素质<br>第二个坑，只要努力就会有结果，创业很多时候就是踩中了运气的节点<br>第三个坑，创业项目越垂直胜算越大<br>第四个坑，创业者必须经验丰富，真正推动大家向前冲的是你的愿景，实现愿景的瓶颈是你的悟性<br>第五个坑，你必须得有团队， 创业本身是孤独的旅程，和团队无关，创业者都拥有能享受孤独的贵族气质  </p>
<blockquote>
<p>你不是必须得有团队，而是必须得有好团队。所以有隐患的团队不如没有团队，单打独斗一阵思路会更清晰。<br>  碰到心动的合伙人，你问问他们，他们最想要什么?不是在你这里，而是对生活、对人生要什么。然后想想自己怎么给他们想要的。</p>
</blockquote>
<h2 id="创业者说：5个问题找到能和你一起创业的人">创业者说：5个问题找到能和你一起创业的人</h2><ul>
<li>告诉我一项你正在努力提高的技能: 都想要“能够不断提高自己能力并帮助其他人提高的领导者”</li>
<li>谁是你的理想工作伙伴: 换句话说，请形容一下谁的技能和优势能够补你之短,考察的是自我认识能力。</li>
<li>你是否曾解决过职责范围之外的事；当时的工作情景是怎样的</li>
<li>你平时的工作安排是什么样子:了解80-20法则，即一份工作最关键的职责实际上非常少,需要人们迅速完成重要工作，不能浪费时间</li>
<li>你如何应对持续的、不可预测的变化</li>
</ul>
<h2 id="创业者所要思考的3个W_（ArtPollo阿波罗艺术网）">创业者所要思考的3个W （ArtPollo阿波罗艺术网）</h2><p>who why how<br>简单做法：尽量回归原始社会，减少分工从而减少公司资源的交易，减少资源的浪费降低公司的机会成本。公司层级的数量永远和效率成反比。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="猎豹CEO傅盛：如何做好创业公司CEO？">猎豹CEO傅盛：如何做好创业公司CEO？</h2><p>创业的最大难度是太自由，而容易失去方向。但是，当给出一个固定性问题，或者说封闭式、有区间问题，难度会大幅度下降。如何做好一家创业公司的CEO，傅盛的答案是“能把创业]]>
    </summary>
    
      <category term="Startup" scheme="http://strong689.github.com/tags/Startup/"/>
    
      <category term="entrepreneur" scheme="http://strong689.github.com/tags/entrepreneur/"/>
    
      <category term="idea" scheme="http://strong689.github.com/tags/idea/"/>
    
      <category term="idea" scheme="http://strong689.github.com/categories/idea/"/>
    
      <category term="Startup" scheme="http://strong689.github.com/categories/idea/Startup/"/>
    
      <category term="创业" scheme="http://strong689.github.com/categories/idea/Startup/%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Admin UI of MongoDB]]></title>
    <link href="http://strong689.github.com/2015/07/20/Admin-UI-of-MongoDB/"/>
    <id>http://strong689.github.com/2015/07/20/Admin-UI-of-MongoDB/</id>
    <published>2015-07-21T06:42:44.000Z</published>
    <updated>2015-07-21T06:44:27.274Z</updated>
    <content type="html"><![CDATA[<h2 id="Admin_UIs_of_MongoDB"><a href="http://docs.mongodb.org/ecosystem/tools/administration-interfaces" target="_blank" rel="external">Admin UIs</a> of MongoDB</h2><ul>
<li>mongo shell</li>
<li>GUI-Style (some for administration, some for data viewing)<ul>
<li>MongoDB Cloud Manager: deploying and managing MongoDB instanaces with monitoing and backup capabilities</li>
<li><strong>mongo-express</strong>:open source, by node.js and express.js</li>
<li>Edda : log visualizer, (pip install edda), it takes logs as input and creates a timeline of notable events in the set</li>
<li><strong>Fluentd</strong>: open source <strong>log</strong> management tool</li>
<li>HumongouS.io: web-based UI for MongoDB</li>
<li><strong>mongobird</strong>: operations and administration management tool for MongoDB with dashboards, forecast warning, and various graphs.</li>
<li>mongoCMS: a MongoDB-backed content manager specifically developed to manage rich content applications such as blogs and other web data</li>
<li>NoSQL Manager for MongoDB: a desktop GUI tool </li>
<li>NoSQL Viewer:</li>
<li><strong>JSON Studio</strong>: a suite of data access applications enabling easy access to data stored in MongoDB using a high-level interface </li>
<li>Mongo Management Studio (CE/EE)</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Admin_UIs_of_MongoDB"><a href="http://docs.mongodb.org/ecosystem/tools/administration-interfaces" target="_blank" rel="external">Adm]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Tools" scheme="http://strong689.github.com/tags/Tools/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/MongoDB/"/>
    
      <category term="Tools" scheme="http://strong689.github.com/categories/MongoDB/Tools/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/MongoDB/Tools/Step-Into/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into MongoDB - Overview II]]></title>
    <link href="http://strong689.github.com/2015/07/20/Step-into-MongoDB-II-Overview/"/>
    <id>http://strong689.github.com/2015/07/20/Step-into-MongoDB-II-Overview/</id>
    <published>2015-07-21T05:35:35.000Z</published>
    <updated>2015-07-21T06:40:06.281Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Hu<strong>mongo</strong>us, MongoDB = JSON +Index</p>
</blockquote>
<h2 id="MongoDB_vs_MySQL(Relational_Database)">MongoDB vs MySQL(Relational Database)</h2><p> NoSQL vs RDBMS , Strengths vs weakness</p>
<ul>
<li>RDBMS<blockquote>
<ul>
<li>relational database structure is easy to ensure data integrity and security (money related, BANK)</li>
<li>structured table, simple way of representing data or business models (view, index, SP, trigger)</li>
<li>SQL, easy to retrieve or query data</li>
<li>complex, multi-row transactions support</li>
<li>no ability to scale horizontally ( at least, for current rdbms product) </li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li>NoSQL<blockquote>
<p> Not to replace RDBMS, it fulfills different areas’ need (large website, User Generated Content)</p>
<ul>
<li>no rely on object-relational mapping</li>
<li>support high transaction loads</li>
<li>no tables’ join opeation support</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="the_goodness_of_MongoDB">the goodness of MongoDB</h2><ul>
<li><p>Scenarios MongoDB specialized in</p>
<blockquote>
<ul>
<li>high read/write load<ul>
<li>High Availability</li>
<li>Data grow quick and go big</li>
<li>Data location based</li>
<li>Flexible, Data Schema unstable</li>
<li>Scalable </li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>use cases MongoDB is good at</p>
<blockquote>
<ul>
<li>Catalog<ul>
<li>Content Management</li>
<li>Personalization</li>
<li>Single(360) View</li>
<li>Internet of Things</li>
<li>Mobile</li>
<li>Real-Time Analytics</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Hu<strong>mongo</strong>us, MongoDB = JSON +Index</p>
</blockquote>
<h2 id="MongoDB_vs_MySQL(Relational_Database)">MongoDB v]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Replica Set" scheme="http://strong689.github.com/tags/Replica-Set/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/MongoDB/"/>
    
      <category term="Overview" scheme="http://strong689.github.com/categories/MongoDB/Overview/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/MongoDB/Overview/Step-Into/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into Mongoosejs - step II]]></title>
    <link href="http://strong689.github.com/2015/07/19/Mongoosejs-II/"/>
    <id>http://strong689.github.com/2015/07/19/Mongoosejs-II/</id>
    <published>2015-07-20T03:15:41.000Z</published>
    <updated>2015-07-21T06:33:25.884Z</updated>
    <content type="html"><![CDATA[<p><strong>Mongoose</strong>: elegant <strong>MongoDB</strong> object modeling for node.js.</p>
<h3 id="Data_Types">Data Types</h3><ul>
<li>String, utf-8 encoded</li>
<li>Number, MongoDB support long and double, but mongoosejs does not</li>
<li>Boolean, true or false</li>
<li>Date (ISODate object, expires, min, max )</li>
<li>Buffer (.copy(target), .equals(other), .writer())</li>
<li>ObjectId ( var id = new mongoose.Types.ObjectId;)</li>
<li>Array ([] or schema; #$shift(), #remove(), .$pop(), .addToSet([args…]), .indexOf(obj), inspect(), .nonAtomicPush([args…]) , .pop(), .pull([args…]), .push([args…]), .set(), .shift(), .sort(), .splice(), .toObject(options), .unshift() )</li>
<li>Mixed, (empty object {} or Schema.Types.Mixed )</li>
<li>custom SchemaTypes</li>
</ul>
<h3 id="Schema">Schema</h3><p>Schema define data structure.</p>
<blockquote>
<p>define schema early, just after require mongoose<br>  easy to update schema even though data exit and no offline or down time</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//define account schema, any website need the account information, even if an anonymous account</span></span><br><span class="line"><span class="keyword">var</span> accountSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	email: &#123;type: <span class="built_in">String</span>, unique: <span class="literal">true</span>&#125;,</span><br><span class="line">	password: <span class="built_in">String</span>,</span><br><span class="line">	name: <span class="built_in">String</span>,</span><br><span class="line">	createdOn: &#123;type: <span class="built_in">Date</span>, <span class="keyword">default</span>: <span class="built_in">Date</span>.now&#125;,</span><br><span class="line">	updatedOn: <span class="built_in">Date</span>,</span><br><span class="line">	lastLogin: <span class="built_in">Date</span>,</span><br><span class="line">	location: [],</span><br><span class="line">	...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Model">Model</h3><ul>
<li>Model is comiled version of Schema, Schema + Model = Class of OOP</li>
<li>An instance of model maps to a document in a database of MongoDB</li>
<li>Collection coorespond to table of RDBMS, </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build Account model by default connection / class Account</span></span><br><span class="line">mongoose.model(<span class="string">'Account'</span>, accountSchema, <span class="string">'accounts'</span>);</span><br><span class="line"><span class="comment">// or by specific connection</span></span><br><span class="line"><span class="comment">//connection1.model('Account', accountSchema);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Instance, an instance of a model refers to a document </span></span><br><span class="line"><span class="keyword">var</span> myAccount = <span class="keyword">new</span> Account(&#123;</span><br><span class="line">    email: <span class="string">'myemailaddress@xxx.com'</span>,</span><br><span class="line">    password: <span class="string">'pwd'</span>,</span><br><span class="line">    name: <span class="string">'myName'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or js code</span></span><br><span class="line">myAccount.name = <span class="string">'myNewName'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>for code above, Model name is Account, Collection name is “accounts”.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Mongoose</strong>: elegant <strong>MongoDB</strong> object modeling for node.js.</p>
<h3 id="Data_Types">Data Types</h3><ul>
<li>]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Mongoosejs" scheme="http://strong689.github.com/tags/Mongoosejs/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/Step-Into/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/Step-Into/MongoDB/"/>
    
      <category term="Mongoosejs" scheme="http://strong689.github.com/categories/Step-Into/MongoDB/Mongoosejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into Mongoosejs - step I]]></title>
    <link href="http://strong689.github.com/2015/07/19/Mongoosejs-I/"/>
    <id>http://strong689.github.com/2015/07/19/Mongoosejs-I/</id>
    <published>2015-07-20T00:00:55.000Z</published>
    <updated>2015-07-21T06:33:08.096Z</updated>
    <content type="html"><![CDATA[<p><a href="http://mongoosejs.com" target="_blank" rel="external"><strong>Mongoose</strong></a><em>: elegant <em>*MongoDB</em></em> object modeling for node.js.</p>
<h3 id="Installation">Installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> instll mongoose -g</span><br></pre></td></tr></table></figure>
<h3 id="Connection_to_MongoDB">Connection to MongoDB</h3><p>best practice</p>
<ul>
<li>opening connection at application start</li>
<li>a connection equals a database</li>
<li>mongoose model reply on connection being defined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// refer mongoos</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// open a connection to a specific server.db</span></span><br><span class="line"><span class="keyword">var</span> connectionString = <span class="string">"mongodb://locahost:27017/testDB"</span>;</span><br><span class="line">mongoose.connect(connectionString);  <span class="comment">//default connection</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connection1 = mongoose.coFateConnection</span><br><span class="line"><span class="keyword">var</span> connectionString2 = <span class="string">"mongodb://locahost:27017/DB2"</span>;</span><br><span class="line"><span class="keyword">var</span> connection2 = mongoose.createConnection(connectionString2);</span><br></pre></td></tr></table></figure>
<p>Format of connection string / Simple options of connection<br>  Format: mongodb://username:password@domain:port/db  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON objects, Options definition</span></span><br><span class="line"><span class="keyword">var</span> connectionOptions = &#123;</span><br><span class="line">	<span class="string">'username'</span>: <span class="string">"db user name"</span>,</span><br><span class="line">	<span class="string">'password'</span>: <span class="string">"db pwd"</span></span><br><span class="line">&#125;;</span><br><span class="line">mongoose.connect(connectionString,connectionOptions);</span><br></pre></td></tr></table></figure>
<h3 id="Close_connection">Close connection</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// to close default connection</span></span><br><span class="line">mongoose.connection.close(callback); </span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Mongoose\'s connection is closed!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//alternative way to close</span></span><br><span class="line">connection1.close(callback);</span><br><span class="line">connection2.close(callback);</span><br></pre></td></tr></table></figure>
<h3 id="Events_of_Connection">Events of Connection</h3><p>a bunch of events list</p>
<ul>
<li>connecting</li>
<li>connected</li>
<li>open</li>
<li>disconnecting</li>
<li>disconnected</li>
<li>close</li>
<li>reconnected</li>
<li>error</li>
<li>fullsetup</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// how to catch events</span></span><br><span class="line">connection1.on(<span class="string">'error'</span>,callback);</span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'[EventName]Error occur!!'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Method_of_connection">Method of connection</h3><ul>
<li>open(connection_string, [database], [port], [options], [callback])</li>
<li>openSet(uris, [database], [options], [callback]), to open the connection to a replica set</li>
<li>close([callback])</li>
<li>collection(name, [options]), to retrieve a collection(create it if not cached)</li>
<li>model(name, [schema], [collection]), to define or retrieve a model</li>
<li>modelNames(), return an array of model names created on this connection</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://mongoosejs.com" target="_blank" rel="external"><strong>Mongoose</strong></a><em>: elegant <em>*MongoDB</em></em> object m]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Mongoosejs" scheme="http://strong689.github.com/tags/Mongoosejs/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/Step-Into/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/Step-Into/MongoDB/"/>
    
      <category term="Mongoosejs" scheme="http://strong689.github.com/categories/Step-Into/MongoDB/Mongoosejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eCommerce Design by MongoDB]]></title>
    <link href="http://strong689.github.com/2015/07/18/eCommerce-Design-by-MongoDB/"/>
    <id>http://strong689.github.com/2015/07/18/eCommerce-Design-by-MongoDB/</id>
    <published>2015-07-18T18:03:58.000Z</published>
    <updated>2015-07-19T22:21:40.555Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>电商参考架构</p>
</blockquote>
<h3 id="[搭建灵活-可搜索-响应快速的产品目录系统][1]">[搭建灵活-可搜索-响应快速的产品目录系统][1]</h3><blockquote>
<p>大数据量电商如何使用MongoDB作为一个庞大产品目录持久层的一些最佳实践<br>  多功能商品目录系统的建模和索引的最佳实践，包括商品及商品系列的查询、店铺价格以及支持多样化搜索的目录浏览 </p>
<ul>
<li>对商品的搜索</li>
<li>对商品系列的搜索</li>
<li>对商品在每个店铺价格的检索</li>
<li>允许目录的多方面搜索和浏览</li>
</ul>
</blockquote>
<h4 id="商品数据模型">商品数据模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//definition: db.product， 只展示了对每件商品而言最重要的信息，例如类别、品牌以及描述：</span></span><br><span class="line">&#123;</span><br><span class="line">	“_id”: “<span class="number">30671</span>”, <span class="comment">//main item ID</span></span><br><span class="line">	“department”: “Shoes”,</span><br><span class="line">	“category”: “Shoes/Women/Pumps”,</span><br><span class="line">	“brand”: “Calvin Klein”,</span><br><span class="line">	“thumbnail”: “http:<span class="comment">//cdn.../pump.jpg”,</span></span><br><span class="line">	“title”: “Evening Platform Pumps”,</span><br><span class="line">	“description”: “Perfect <span class="keyword">for</span> a casual night out or a formal event.”,</span><br><span class="line">	“style”: “Designer”,</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//find by ID</span></span><br><span class="line">db.product.findOne(&#123;_id:<span class="string">"30671"</span>&#125;);</span><br><span class="line"><span class="comment">//find by serias IDs</span></span><br><span class="line">db.product.findOne(&#123;_id:&#123;$<span class="keyword">in</span>:[<span class="string">"30617"</span>,<span class="string">"45212"</span>]&#125;&#125;);  <span class="comment">//$in operator</span></span><br><span class="line"><span class="comment">//find by </span></span><br><span class="line">db.product.findOne(&#123;category:<span class="regexp">/^Shoes/</span>Women/&#125;);		<span class="comment">// regular express</span></span><br></pre></td></tr></table></figure>
<h4 id="系列数据模型">系列数据模型</h4><blockquote>
<p>对产品目录而言另一个重要的考量是商品系列，例如现有尺寸、颜色以及风格。<br>  对现有的、也许需要检索的商品系列（例如大小和颜色）而言的处理方法：</p>
<ul>
<li>在一个单一文档中存储一个商品以及它所有的系列<br>这种方法拥有能够在一个单一查询中检索一个商品以及其所有系列的优点。<br>然而，它并不是在所有情况下都是最好的方法。避免无限制的文档增长是一个非常重要的最佳实践。<br>如果产品系列的数据以及它们相关数据非常小，在商品文档中存储这些数据也许会有意义。</li>
<li>创建一个能够关联到主商品的、单独的系列数据模型 (pefer)</li>
</ul>
<p>维护了在目录中展示主商品以及当用户请求一个更详细的产品视图时对每个系列的快速查询。<br>  也可以保证商品以及系列文档的一个可预测大小</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//definition: db.variantion  //关联到主商品的、单独的系列数据模型</span></span><br><span class="line">&#123;</span><br><span class="line">	“_id”: ”<span class="number">93284847362823</span>”, <span class="comment">//variant sku, 商品编号</span></span><br><span class="line">	“itemId”: “<span class="number">30671</span>”, <span class="comment">//references the main item</span></span><br><span class="line">	“size”: <span class="number">6.0</span>,</span><br><span class="line">	“color”: “red”</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过它们的商品编号来快速检索到特定的商品系列 ???</span></span><br><span class="line">db.variation.find(&#123;_id:”<span class="number">93284847362823</span>”&#125;)</span><br><span class="line"><span class="comment">//通过对itemId  属性的查询获得某个特定商品的所有系列</span></span><br><span class="line">db.variation.find(&#123;itemId:”<span class="number">30671</span>”&#125;).sort(&#123;_id:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="不同店铺不同价格">不同店铺不同价格</h4><blockquote>
<p>Design: 将每个Price文档的_id设置为<strong>商品ID</strong>或者<strong>商品编号（SKU）</strong>的一个级联，<br>  并且将<strong>商店ID</strong>与价格变量相关联,<br>  这种方法也为处理价格提供很大的灵活性，因为它允许我们在商品或者系列级别对商品进行定价   </p>
<ul>
<li>商品：30671_store23  </li>
<li>某个特定规格的商品：93284847362823_store23<br>可以查询所有价格或者只是某个特定店铺的价格：</li>
<li>所有价格：db.prices.find({_id:/^30671/})  </li>
<li><p>某个特定店铺的价格：db.prices.find({_id:/^30671_store23/}) </p>
<p>可以添加其他组合，<br> 例如每个店铺群的价格，然后在单个查询中使用$in操作符获取对于一个商品而言所有可能的价格:</p>
</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.prices.find(&#123;</span><br><span class="line">	_id:&#123;$<span class="keyword">in</span>:[ </span><br><span class="line">		“<span class="number">30671</span>_store23”,</span><br><span class="line">		“<span class="number">30671</span>_sgroup12”,</span><br><span class="line">		“<span class="number">93284847362823</span>_store23”,	</span><br><span class="line">		“<span class="number">93284847362823</span>_sgroup12” </span><br><span class="line">		]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="浏览和搜索商品">浏览和搜索商品</h4><blockquote>
<p>挑战：</p>
<pre><code><span class="bullet">* </span>响应时间：在用户浏览的同时，结果的每个页面应该在毫秒内返回  
<span class="bullet">* </span>多个属性：伴随着用户选择不同的方面（例如，品牌、大小、颜色等），新的查询必须能够在多个文档属性中运行  
<span class="bullet">* </span>系列级别属性：一些用户选择的属性将会在商品级别进行查询，
<span class="code">  例如品牌，但是其它的查询则有可能运行于系列级别上，例如尺寸。</span>
<span class="bullet">* </span>多个系列：每个商品都有可能有成千上万个系列，但是我们只希望每个商品只展示一次，因此，结果必须消除重复项。
<span class="bullet">* </span>排序：用户需要能够在多个属性上进行排序，例如价格、尺寸，此外排序操作必须能够高效运行。
<span class="bullet">* </span>分页：每个页面只返回少量结果，这就要求确定性排序。
</code></pre><p>Solution: MongoDB提供一个开源的[连接件项目][3]<br>  它允许MongoDB和Apache Solr以及Elasticsearch同时使用。<br>  然而，对于我们的参考架构，我们想完全在MongoDB中实现一个多方面搜索。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了实现这个功能，我们创建了另一个集合，用于存储所谓的摘要文档。  </span></span><br><span class="line">  这些文档包含了我们需要基于多个搜索方面对产品目录中商品进行快速检索的所有信息。</span><br><span class="line">&#123;</span><br><span class="line">	“_id”: “<span class="number">30671</span>”,</span><br><span class="line">	“title”: “Evening Platform Pumps”,</span><br><span class="line">	“department”: “Shoes”,</span><br><span class="line">	“Category”: “Women/Shoes/Pumps”,</span><br><span class="line">	“price”: <span class="number">149.95</span>,</span><br><span class="line">	“attrs”: [“brand”: “Calvin Klein”, …],</span><br><span class="line">	“sattrs”: [“style”: ”Designer”, …],</span><br><span class="line">	“vars”: [</span><br><span class="line">		&#123;</span><br><span class="line">		“sku”: “<span class="number">93284847362823</span>”,</span><br><span class="line">		“attrs”: [&#123;“size”: <span class="number">6.0</span>&#125;, &#123;“color”: “red”&#125;, …],</span><br><span class="line">		“sattrs”: [&#123;“width”: <span class="number">8.0</span>&#125;, &#123;“heelHeight”: <span class="number">5.0</span>&#125;, …],</span><br><span class="line">		&#125;, … <span class="comment">//Many more SKUs</span></span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过使用这个数据模型，我们可以创建以下复合索引：<br>  假设用户将会选择部门来重新定义他们的搜索结果。<br>  对于没有部门的一个产品目录，我们可以非常轻易地从另一个像类别或者类型等比较普遍的方面开始。<br>  然后，我们可以执行需要进行多方面搜索的查询，并且快速将结果返回到页面：</p>
<ul>
<li>部门+属性+类别+ _id</li>
<li>部门+变量属性+类别+ _id</li>
<li>部门+类别+ _id</li>
<li>部门+价格+ _id</li>
<li>部门+评分+ _id</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从商品ID获取摘要</span></span><br><span class="line">db.variation.find(&#123;_id:”<span class="number">30671</span>”&#125;)</span><br><span class="line"><span class="comment">//获取特定商品系列的摘要</span></span><br><span class="line">db.variation.find(&#123;vars.sku:”<span class="number">93284847362823</span>”&#125;,&#123;“vars.$”:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//通过部门获取所有商品的摘要</span></span><br><span class="line">db.variation.find(&#123;department:”Shoes”&#125;)</span><br><span class="line"><span class="comment">//使用一系列混合的参数获取摘要</span></span><br><span class="line">db.variation.find(&#123; “department”:”Shoes”,“vars.attr”: &#123;“color”:”red”&#125;,“category”: “^<span class="regexp">/Shoes/</span>Women”&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="[库存优化方法][2]">[库存优化方法][2]</h3><blockquote>
<p>可以通过电商的店铺及应用访问到的、可靠的、集中的库存系统是提高和丰富用户体验中一个非常庞大的基础部分。</p>
</blockquote>
<h4 id="想要得到的一些特性：">想要得到的一些特性：</h4><ul>
<li>可靠地检查产品的实时库存</li>
<li>提供用户在某个指定实体店提货的选项</li>
<li>在某个商品有促销的情况下，判断每日补给的需求</li>
</ul>
<h4 id="设计原则">设计原则</h4><blockquote>
<p>电商参考架构中的库存系统应该要做的事情：<br>  需要的是构建一个高性能、可水平扩展的系统，<br>  在一个庞大的、地理分布的区域中的店铺和用户都能够与MongoDB进行实时交互来查看和更新目录。</p>
</blockquote>
<ul>
<li>提供一个库存的360°视图，可以在任何时间被任何客户端访问</li>
<li>能够被任何需要库存数据的系统使用</li>
<li>解决大数据量、以读取为主的工作负载，例如：库存检查</li>
<li>解决大数据量的实时写操作，例如：库存更新</li>
<li>支持批量写入操作以更新系统记录</li>
<li>地理上分离</li>
<li>伴随着库存中店铺数量或者商品数量的增多，保持水平扩展</li>
</ul>
<h4 id="店铺模式">店铺模式</h4><blockquote>
<p>用户案例的一个基本需求是为每个店铺维护一个关于所有库存的、集中的、实时的视图。<br>  首先需要为店铺集合创建视图，从而将的库存与地理位置相联系起来。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个店铺都使用一个相当直接的文档</span></span><br><span class="line">&#123;</span><br><span class="line">	“_id”:ObjectId(“<span class="number">78</span>s89453d8chw28h428f2423”),</span><br><span class="line">	“className”:”catalog.Store”,</span><br><span class="line">	“storeId”:”store100”,</span><br><span class="line">	“name”:”Bessemer Store”,</span><br><span class="line">	“address”:&#123;</span><br><span class="line">	“addr1”:”<span class="number">1</span> Main St.”,</span><br><span class="line">	“city”:”Bessemer”,</span><br><span class="line">	“state”:”AL”,</span><br><span class="line">	“zip”:”<span class="number">12345</span>”,</span><br><span class="line">	“country”:”USA”</span><br><span class="line">	&#125;,</span><br><span class="line">	“location”:[-<span class="number">86.95444</span>, <span class="number">33.40178</span>],</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建下列的索引来优化在店铺数据中最经常使用读取类型：</p>
<ul>
<li>{“storeId”:1},{“unique”:true}: 获取某个特定商店的库存</li>
<li>{“name”:1}:根据名字获取商店名称</li>
<li>{“address.zip”:1}: 获取一个邮编内的所有店铺，例如：店铺定位程序</li>
<li>{“location”: 2dsphere}:获取某一个特定地理位置周围的所有商店</li>
</ul>
</blockquote>
<h4 id="库存数据模型">库存数据模型</h4><blockquote>
<p>创建一个库存集合来跟踪每一个商品以及它们所有商品系列的真实库存量</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数据从店铺集合复制到库存集合,最小化对数据库的来回读取数目,同时降低应用级的连接</span></span><br><span class="line"><span class="comment">// db.inventory</span></span><br><span class="line">&#123;</span><br><span class="line">	“_id”:”<span class="number">902372093572409542</span>jbf42r2f2432”,</span><br><span class="line">	“storeId”:”store100”,				<span class="comment">// 知道哪个商店有什么商品是非常必要的</span></span><br><span class="line">	“location”:[-<span class="number">86.95444</span>, <span class="number">33.40178</span>],	<span class="comment">// 查询离用户附近的库存</span></span><br><span class="line">	“productId”:”<span class="number">20034</span>”,  				<span class="comment">// </span></span><br><span class="line">	“vars”:[</span><br><span class="line">		&#123;“sku”:”sku1”, “quantity”:”<span class="number">5</span>”&#125;,  <span class="comment">// 在商品级别文档中表示库存 </span></span><br><span class="line">		&#123;“sku”:”sku2”, “quantity”:”<span class="number">23</span>”&#125;, <span class="comment">// 更大的文档以降低数据冗余度，可以减少在库存集合中需要查询或者更新的文档总数</span></span><br><span class="line">		&#123;“sku”:”sku3”, “quantity”:”<span class="number">2</span>”&#125;,</span><br><span class="line">		…</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建索引</p>
<ul>
<li>{storeId:1}: 得到某一个指定商店库存中的所有商品</li>
<li>{productId:1},{storeId:1}: 获取一个指定店铺中某个产品的库存</li>
<li>{productId:1},{location:”2dsphere”}:获取在一定距离之内的某个产品的所有库存</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以基于’productID’查询我们的库存了</span></span><br><span class="line">db.inventory.find(&#123;</span><br><span class="line">	“storeId”:”store100”,</span><br><span class="line">	“productId”:“<span class="number">20034</span>”,</span><br><span class="line">	“vars.sku”:”sku11736”</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;“vars.$”:<span class="number">1</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3><p><a href="http://www.mongoing.com/blog/retail-reference-architecture-part-1" target="_blank" rel="external">1</a><br><a href="http://www.mongoing.com/blog/retail-reference-architecture-part-2-approaches-inventory-optimization" target="_blank" rel="external">2</a><br><a href="http://blog.mongodb.org/post/29127828146/introducing-mongo-connector" target="_blank" rel="external">3</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>电商参考架构</p>
</blockquote>
<h3 id="[搭建灵活-可搜索-响应快速的产品目录系统][1]">[搭建灵活-可搜索-响应快速的产品目录系统][1]</h3><blockquote>
<p>大数据量电商如何使用MongoDB作]]>
    </summary>
    
      <category term="MongoDB, eCommerce, Product Catlog,  Inventory" scheme="http://strong689.github.com/tags/MongoDB-eCommerce-Product-Catlog-Inventory/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/MongoDB/"/>
    
      <category term="Design" scheme="http://strong689.github.com/categories/MongoDB/Design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into MongoDB II - Industry Sample]]></title>
    <link href="http://strong689.github.com/2015/07/17/Step-into-MongoDB-II-Industry-Sample/"/>
    <id>http://strong689.github.com/2015/07/17/Step-into-MongoDB-II-Industry-Sample/</id>
    <published>2015-07-18T06:32:11.000Z</published>
    <updated>2015-07-19T22:19:57.904Z</updated>
    <content type="html"><![CDATA[<h3 id="[快的打车][1]">[快的打车][1]</h3><ul>
<li><p>场景</p>
<blockquote>
<p>1亿多用户，超过300个城市里与300万司机取得了联系<br>两类业务：快的出租车 &amp; 快的一号专车<br>司机与乘客每天高达6百万次的联系<br>管理着将近5亿的订单<br>支持着每秒钟数以万计的读写操作<br>MongoDB每秒支持着5万个操作（读取和写入的比例约为80:20）<br>数据库已经增长到5亿多文档，并且还在持续扩展中  </p>
</blockquote>
</li>
<li><p>应用</p>
<blockquote>
<p>选择指标：性能(延迟、实时更新的速度),可扩展性,易用性<br>LBS ： MongoDB的地理空间索引及查询<br>可扩展性,历史订单数据的存档：顾客每呼叫一辆出租车，行程的起点及终点、司机的身份以及费用等都会被存储在一条单一的记录中<br>Redis 缓存<br>MySQL 存储顾客运营及订单数据<br>Hadoop 将数据从MongoDB和MySQL中拷贝到Hadoop上进行挖掘及分析<br>使用Nagios来监测应用及数据库<br>使用Java驱动来运行MongoDB2.6  </p>
</blockquote>
</li>
</ul>
<h3 id="[盛大大数据量项目中的应用][2]">[盛大大数据量项目中的应用][2]</h3><blockquote>
<p> Best Practices<br>Replica Set: one for primary, one for secondary, one for increamental back up with  a arbiter</p>
</blockquote>
<h3 id="[电影票预定系统_design_idea][3]">[电影票预定系统 design idea][3]</h3><h4 id="需求">需求</h4><blockquote>
<p>每个场次，每个座位，都只有一个库存<br>每个订单所预定的座位有锁定状态，在支付前对应的作为不能被再次购买<br>订单涉及到的座位要不全成功，要不全失败<br>“全国”级的，数据容量不是太大问题，但性能上要支持水平扩展  </p>
</blockquote>
<h4 id="描述信息文档结构">描述信息文档结构</h4><ul>
<li><p>影院描述</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CinemaManager.cinema_detail&#123;</span><br><span class="line">	_id:ObjectId,</span><br><span class="line">	name:<span class="built_in">String</span>,</span><br><span class="line">	city:<span class="built_in">String</span>,</span><br><span class="line">	location: [,],  <span class="comment">// [ 120.13, 30.16 ], coordinate</span></span><br><span class="line">	comments:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">db.cinema_detail.ensureIndex(&#123;city:<span class="number">1</span>, name:<span class="number">1</span>&#125;)&#123;</span><br><span class="line">	<span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</span><br><span class="line">	<span class="string">"numIndexesBefore"</span> : <span class="number">2</span>,</span><br><span class="line">	<span class="string">"numIndexesAfter"</span> : <span class="number">2</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">db.cinema_detail.ensureIndex(&#123;location: <span class="string">"2d"</span>&#125;)&#123;</span><br><span class="line">	<span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</span><br><span class="line">	<span class="string">"numIndexesBefore"</span> : <span class="number">3</span>,</span><br><span class="line">	<span class="string">"numIndexesAfter"</span> : <span class="number">4</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>影厅描述</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CinemaManager.theater_detail&#123;</span><br><span class="line">	_id,</span><br><span class="line">	cinema_id,</span><br><span class="line">	name:<span class="built_in">String</span>,</span><br><span class="line">	seat:&#123;</span><br><span class="line">		row1:[],</span><br><span class="line">		row2:[],</span><br><span class="line">		row3:[],</span><br><span class="line">		...</span><br><span class="line">	&#125;,</span><br><span class="line">	comments:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">db.theater_detail.ensureIndex(&#123;cinema_id:<span class="number">1</span>&#125;)&#123;</span><br><span class="line">	<span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</span><br><span class="line">	<span class="string">"numIndexesBefore"</span> : <span class="number">1</span>,</span><br><span class="line">	<span class="string">"numIndexesAfter"</span> : <span class="number">2</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>影片描述</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CinemaManager.movie_detail&#123;</span><br><span class="line">	_id,</span><br><span class="line">	name:<span class="built_in">String</span>,</span><br><span class="line">	director:<span class="built_in">String</span>,</span><br><span class="line">	actors:[],</span><br><span class="line">	comments:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">db.movie_detail.ensureIndex(&#123;name:<span class="number">1</span>&#125;)&#123;</span><br><span class="line">	<span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</span><br><span class="line">	<span class="string">"numIndexesBefore"</span> : <span class="number">1</span>,</span><br><span class="line">	<span class="string">"numIndexesAfter"</span> : <span class="number">2</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="影片放映文档结构">影片放映文档结构</h4><blockquote>
<p> 放映信息包含放映时间段，放映影厅，票价。虽然Document结构可以做复杂的嵌套，但原则上期望Document尽量小，<br>利用数据Shard，性能优化。所以在movie_schedule的设计上每个影片的每场放映独立一个Document表达。</p>
</blockquote>
<ul>
<li>描述<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CinemaManager.movie_schedule&#123;</span><br><span class="line">	_id,</span><br><span class="line">	cinema_id,</span><br><span class="line">	movie_id,</span><br><span class="line">	theater_id,</span><br><span class="line">	start_time:</span><br><span class="line">	end_time,</span><br><span class="line">	comments:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">db.movie_schedule.ensureIndex(&#123;cinema_id:<span class="number">1</span>, movie_id:<span class="number">1</span>, theater_id:<span class="number">1</span>&#125;)&#123;</span><br><span class="line">	<span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</span><br><span class="line">	<span class="string">"numIndexesBefore"</span> : <span class="number">1</span>,</span><br><span class="line">	<span class="string">"numIndexesAfter"</span> : <span class="number">2</span>,</span><br><span class="line">	<span class="string">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="交易系统">交易系统</h4><blockquote>
<p>抽象的来看，售卖系统就是对上诉所有集合的一个整合，外加一套库存字段。<br>我们认为一场放映就是一个主商品，每个座位可以认为是这个商品的SKU，每个SKU都是1份。<br>通过Reference关系结合movie_schedule与theater_detail，注意这里引用了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	_id: ,</span><br><span class="line">	movie_schedule_id:</span><br><span class="line">	theater_id: ,</span><br><span class="line">	seat:	&#123;</span><br><span class="line">		row1: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">		row2: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">		row3: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">		row4: [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不仅是Reference的引用关系，还复制了theater_detail.seat字段，每个seat都有一个库存数字，<br>因为在MongoDB中一个Document的操作是可以保证原子的，不需要对Collection加任何锁。数字2并不是表示可以卖2次：</p>
<ul>
<li>数字2表示，可销售</li>
<li>数字1表示，已锁定</li>
<li>数字0表示，已售完</li>
</ul>
</blockquote>
<h3 id="From">From</h3><p><a href="http://www.mongoing.com/blog/kuaidi-interview" target="_blank" rel="external">1</a><br><a href="http://www.mongoing.com/blog/national-tickets-order-system" target="_blank" rel="external">2</a><br><a href="http://www.infoq.com/cn/presentations/glj-mongodb-in-sdo" target="_blank" rel="external">3</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="[快的打车][1]">[快的打车][1]</h3><ul>
<li><p>场景</p>
<blockquote>
<p>1亿多用户，超过300个城市里与300万司机取得了联系<br>两类业务：快的出租车 &amp; 快的一号专车<br>司机与乘客每天高达6百万次的]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Schema" scheme="http://strong689.github.com/tags/Schema/"/>
    
      <category term="Schema Design" scheme="http://strong689.github.com/tags/Schema-Design/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/MongoDB/"/>
    
      <category term="Design" scheme="http://strong689.github.com/categories/MongoDB/Design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into MongoDB - Overview I]]></title>
    <link href="http://strong689.github.com/2015/07/16/Step-into-MongoDB-I-Overview/"/>
    <id>http://strong689.github.com/2015/07/16/Step-into-MongoDB-I-Overview/</id>
    <published>2015-07-17T05:31:31.000Z</published>
    <updated>2015-07-21T06:34:42.842Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Hu<strong>mongo</strong>us, MongoDB = JSON +Index  </p>
</blockquote>
<h2 id="Features">Features</h2><blockquote>
<p>document/Object/collection oriented, JSON/BSON, Key/Value, fully indexed(object)<br>Replication &amp; High Availability, Rich Document based Query and Update<br>auto-sharding(sharding key) &amp; GridFS, Map/Reduce  </p>
</blockquote>
<h3 id="ReplicaSet">ReplicaSet</h3><blockquote>
<p>Basically master/slave replication<br>automatic fail-over to recovery member nodes<br>consists of two or more nodes that are copies of each other<br>automatically elects a primary(master) if there is no primary currently available<br>Distribute read load<br>arbiter  </p>
</blockquote>
<h3 id="Monitoring_&amp;_Diagnostics">Monitoring &amp; Diagnostics</h3><ul>
<li>query profiler</li>
<li>Http console</li>
<li>mongostat</li>
<li>Memory-mapping, keep indexes in memory</li>
<li>oplog {ts:{},h{}, op:{},ns:{},o:{},o2:{}}, local, db.oplog.</li>
</ul>
<h3 id="backup">backup</h3><ul>
<li>mongoexport, monogoimport</li>
<li>mongodump mongorestore</li>
<li>data consistency use —oplog</li>
<li>use increamental backup </li>
<li>read oplog and replay(wordnik tools)</li>
</ul>
<h3 id="Rollback_MongoDB">Rollback MongoDB</h3><ul>
<li>Use snapshot + oplog</li>
<li>Use delayed secondary + oplog</li>
</ul>
<h3 id="Ops">Ops</h3><ul>
<li>Scala up : Vertical</li>
<li>Scale out: horizontal / auto sharding</li>
<li>build new index in a huge collections</li>
</ul>
<h2 id="Scenario">Scenario</h2><ul>
<li>real time  CRUD, web 2.0</li>
<li>buffer, persistent buffer</li>
<li>big data, web log</li>
<li>db cluster </li>
</ul>
<h3 id="others">others</h3><blockquote>
<p>no transaction support</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Hu<strong>mongo</strong>us, MongoDB = JSON +Index  </p>
</blockquote>
<h2 id="Features">Features</h2><blockquote>
<p>documen]]>
    </summary>
    
      <category term="MongoDB" scheme="http://strong689.github.com/tags/MongoDB/"/>
    
      <category term="Replica Set" scheme="http://strong689.github.com/tags/Replica-Set/"/>
    
      <category term="MongoDB" scheme="http://strong689.github.com/categories/MongoDB/"/>
    
      <category term="Overview" scheme="http://strong689.github.com/categories/MongoDB/Overview/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/MongoDB/Overview/Step-Into/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into Markdown]]></title>
    <link href="http://strong689.github.com/2015/07/15/Step-into-Markdown/"/>
    <id>http://strong689.github.com/2015/07/15/Step-into-Markdown/</id>
    <published>2015-07-16T05:21:43.000Z</published>
    <updated>2015-07-20T03:10:09.883Z</updated>
    <content type="html"><![CDATA[<h4 id="Italics_and_Bold">Italics and Bold</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">** _</span><br></pre></td></tr></table></figure>
<h4 id="Header">Header</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ## ### #### ...</span><br><span class="line">#### _italics header five_</span><br></pre></td></tr></table></figure>
<h4 id="Links">Links</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[visit url](url)</span><br></pre></td></tr></table></figure>
<ul>
<li>inline link <a href=""></a></li>
<li>reference link [][]</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Find something by your [<span class="link_label">favorites search engine</span>][<span class="link_reference">favorite</span>];</span><br><span class="line">or try [<span class="link_label">another</span>][<span class="link_reference">alternative</span>].</span><br><span class="line"><span class="code">	</span></span><br><span class="line">[<span class="link_reference">favorite</span>]:<span class="link_url">www.google.com</span></span><br><span class="line">[<span class="link_reference">alternative</span>]:<span class="link_url">www.bing.com</span></span><br></pre></td></tr></table></figure>
<h4 id="Images">Images</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](url "alt text")</span><br></pre></td></tr></table></figure>
<ul>
<li>inline image</li>
<li>reference image<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   //inline style</span><br><span class="line">![text](url "alt text")</span><br><span class="line">//reference style</span><br><span class="line">![text][logo]</span><br><span class="line"></span><br><span class="line">[logo]:url 'alt text'</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="block_quotes_&gt;">block quotes &gt;</h4><pre><code>&gt; this <span class="keyword">is</span> a <span class="keyword">block</span> quotes <span class="keyword">to</span> <span class="keyword">notify</span> reader pay special attention
</code></pre><h4 id="Lists_*">Lists *</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + -</span><br></pre></td></tr></table></figure>
<h4 id="Paragraphs">Paragraphs</h4><ul>
<li>hard break</li>
<li>soft break : two spaces after each new line</li>
</ul>
<h4 id="Code_`">Code `</h4><blockquote>
<p>sample 1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">"test"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure></p>
<p>sample 2<br>Inline <code>code</code> test <code>var num = 123</code> , good sample.<br>sample 3<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install express -g</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="Tablestables_is_not_part_of_core_Markdown_spec-_by_GFM_spec?">Tablestables is not part of core Markdown spec. by GFM spec?</h4><h4 id="Horizontal_rule">Horizontal rule</h4><blockquote>
<p>three or more - * _  hyphen Asterisks underscore</p>
</blockquote>
<h4 id="inline_HTML_support">inline HTML support</h4><h4 id="youtube_videos_sample">youtube videos sample</h4><blockquote>
<p>sample<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">width</span>=<span class="value">"560"</span> <span class="attribute">height</span>=<span class="value">"315"</span> <span class="attribute">src</span>=<span class="value">"https://www.youtube.com/embed/6A5EpqqDOdk"</span> <span class="attribute">frameborder</span>=<span class="value">"0"</span> <span class="attribute">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
 <iframe width="560" height="315" src="https://www.youtube.com/embed/6A5EpqqDOdk" frameborder="0" allowfullscreen></iframe>

]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Italics_and_Bold">Italics and Bold</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>]]>
    </summary>
    
      <category term="Markdown" scheme="http://strong689.github.com/tags/Markdown/"/>
    
      <category term="Markdown" scheme="http://strong689.github.com/categories/Markdown/"/>
    
      <category term="Overview" scheme="http://strong689.github.com/categories/Markdown/Overview/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/Markdown/Overview/Step-Into/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[互联网+]]></title>
    <link href="http://strong689.github.com/2015/07/14/Internet-Plus/"/>
    <id>http://strong689.github.com/2015/07/14/Internet-Plus/</id>
    <published>2015-07-15T06:47:23.000Z</published>
    <updated>2015-07-21T07:25:10.700Z</updated>
    <content type="html"><![CDATA[<p>总理提出的互联网+，貌似总理只是顺应当下的互联网趋势而提出，但其实内容是相当丰富的。即：让国家做顶层的设计，大框架的分配社会资源，接着让创业者去填满社会方方面面宏观调控无法渗透和填满的市场空间。大道至简，三个字和一个符号就把民族复兴的基调定好了。</p>
<blockquote>
<p>中国传统企业+Internet</p>
</blockquote>
<h2 id="互联网">互联网</h2><ul>
<li>互联网思维</li>
<li>互联网平台/生态</li>
<li>互联网渠道</li>
<li>万物互联 / 物联网<blockquote>
<p>   传统行业: 交易,金融,地产,音乐,娱乐…<br>  +信息 +交易 +….  //online 上线/线上</p>
</blockquote>
</li>
</ul>
<h3 id="=&gt;_营销渠道">=&gt; 营销渠道</h3><h2 id="+">+</h2><ul>
<li>+政策 &amp; +人才</li>
<li>+技术<br>  移动互联 与计算 大数据 物联网<br>  LBS NFC Bluetooth<br>  O2O</li>
</ul>
<h3 id="=&gt;_+服务">=&gt; +服务</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>总理提出的互联网+，貌似总理只是顺应当下的互联网趋势而提出，但其实内容是相当丰富的。即：让国家做顶层的设计，大框架的分配社会资源，接着让创业者去填满社会方方面面宏观调控无法渗透和填满的市场空间。大道至简，三个字和一个符号就把民族复兴的基调定好了。</p>
<blockquo]]>
    </summary>
    
      <category term="Internet Plus" scheme="http://strong689.github.com/tags/Internet-Plus/"/>
    
      <category term="Internet Plus" scheme="http://strong689.github.com/categories/Internet-Plus/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Step into Jadejs]]></title>
    <link href="http://strong689.github.com/2015/07/14/Step-into-Jadejs/"/>
    <id>http://strong689.github.com/2015/07/14/Step-into-Jadejs/</id>
    <published>2015-07-15T05:11:29.000Z</published>
    <updated>2015-07-20T03:11:05.619Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Node Template Engine, a terse language for writing HTML templates, support dynamic code and reusability.</p>
<h1 id="Installation_&amp;_API">Installation &amp; API</h1><ul>
<li>Installation<br>  $ npm install jade -g</li>
<li>API<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> jade <span class="built_in">require</span>(<span class="string">"jade"</span>);</span><br><span class="line"><span class="keyword">var</span> fn = jade.compile(<span class="string">'string of jade'</span>,options);</span><br><span class="line">fn(locals);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h1 id="Jade_command_line">Jade command line</h1><pre><code>$ jade [-<span class="literal">options</span>] [<span class="keyword">file</span>]
$ jade layout.jade //compile layout.jade <span class="keyword">file</span> to layout.html <span class="keyword">file</span>
$ jade layout      //compile whole <span class="string">"layout"</span> <span class="literal">directory</span> 
</code></pre><h1 id="Jade_Syntax">Jade Syntax</h1><h2 id="Common">Common</h2><ul>
<li>doctype html/xml/… e.g.-&gt; &lt;!DOCTYPE html&gt;; </li>
<li>Indented style</li>
<li>text at the start of line represents an html tag</li>
<li>self closing tags(img,meta, link…) and explicitly self close (appending /, e.g. abc/ -&gt; <abc>)</abc></li>
</ul>
<h2 id="Attributes">Attributes</h2><ul>
<li>By default, all attributes are escaped, unescapeded attributes need use != instead of =, use !{name} instead of #{name}.</li>
<li>&amp;attributes can be used to explode an object into attributes of an element, it’s not escaped by default</li>
<li>Boolean/Style/Class attributes</li>
<li>Class/ID Literal</li>
</ul>
<h2 id="Text/PlainText">Text/PlainText</h2><hr>
<h3 id="Piped_Text_|">Piped Text |</h3><pre><code>|  <span class="comment">//to prefix the line with a | character(pipe)</span>
</code></pre><h3 id="HTML_Tags">HTML Tags</h3><h4 id="Inline_in_a_Tag">Inline in a Tag</h4><pre><code><span class="tag">p</span> <span class="tag">h1</span> <span class="tag">h2</span> ... script  
</code></pre><h4 id="Block_in_a_Tag">Block in a Tag</h4><pre><code><span class="tag">p</span>. <span class="tag">h1</span>. script.  ....
</code></pre><h2 id="JS_Code_support">JS Code support</h2><ul>
<li><p>prefix - / unbuffered code &amp; block unbuffered code</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   - var foo = "foo";</span><br><span class="line">-</span><br><span class="line">  each item in list</span><br><span class="line">    li= item</span><br></pre></td></tr></table></figure>
</li>
<li><p>prefix = / buffered code ; support JS expressions</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   h1= foo</span><br><span class="line">= foo</span><br><span class="line">p=list</span><br></pre></td></tr></table></figure>
</li>
<li><p>unescaped buffered code<br>  p!= “This is “ + “<em>unescaped</em>“</p>
</li>
<li>Jade naturely support if, else, else if, until, while , unless</li>
</ul>
<h2 id="basic_controls">basic controls</h2><hr>
<h3 id="if,_unless">if, unless</h3><pre><code><span class="keyword">if</span> <span class="property">name</span> == <span class="string">"xyz"</span>
  h1 hello xyz
<span class="keyword">else</span>
  h1 My Name <span class="keyword">is</span> <span class="comment">#{name}</span>
</code></pre><h3 id="for,_each,_while">for, each, while</h3><pre><code><span class="keyword">select
</span>  each <span class="keyword">book, </span>i in <span class="keyword">books
</span>    option(value<span class="label">=i</span>) <span class="keyword">Book </span>#{<span class="keyword">book}
</span><span class="label">ul</span>
  for <span class="keyword">book </span>in <span class="keyword">books
</span>    li= <span class="keyword">book
</span>  <span class="preprocessor">else</span>
    li no <span class="keyword">books!</span>
</code></pre><h3 id="case">case</h3><pre><code>case month
when 1
  p January
when 2
  p February
other
  p Month : #{month}
</code></pre><h2 id="extends_&amp;_inheritance">extends &amp; inheritance</h2><hr>
<h3 id="extends">extends</h3><pre><code><span class="keyword">extends</span> .<span class="regexp">/view/</span>layout.jade
</code></pre><h3 id="block">block</h3><ul>
<li>block, by default, will be replaced within a child template, it’s a recursive process</li>
<li>(block) append</li>
<li>(block) prepend</li>
</ul>
<h3 id="include">include</h3><ul>
<li>insert the contents of one jade file into another</li>
<li>plain text file</li>
<li>js/css</li>
<li>filtered text<br> include:markdown article.md</li>
</ul>
<h2 id="interpolation">interpolation</h2><hr>
<h3 id="String_Interpolation,_escaped">String Interpolation, escaped</h3><pre><code>-<span class="ruby">var msg = <span class="string">""</span>;
</span>h1= msg
p This is #{<span class="ruby">msg}</span>
</code></pre><h3 id="String_Interpolation,_Unescaped">String Interpolation, Unescaped</h3><pre><code><span class="change">!{msg}</span>
</code></pre><h3 id="Tag_Interpolation,_#[_]">Tag Interpolation, #[ ]</h3><pre><code><span class="tag">p</span>. 
  Please visit my blog on 
   #[<span class="function"><span class="title">a</span><span class="params">(target=<span class="string">"_blank"</span>, href=<span class="string">"https://strong689.github.io"</span>)</span></span> GitHub]
</code></pre><h2 id="Mixins">Mixins</h2><hr>
<p>to create reusable blocks of jade</p>
<h3 id="Mixins_decalration_&amp;_reuse">Mixins decalration &amp; reuse</h3><pre><code><span class="comment">// Declaration</span>
mixin myfooter
  <span class="tag">ul</span> 
    <span class="tag">li</span> <span class="function"><span class="title">a</span><span class="params">(href=<span class="string">"abc.com"</span>)</span></span> about me
    <span class="tag">li</span> <span class="function"><span class="title">a</span><span class="params">(href=<span class="string">"/privacy.html"</span>)</span></span> privary
    <span class="tag">li</span> <span class="function"><span class="title">a</span><span class="params">(href=<span class="string">"/home.html"</span>)</span></span> home
mixin <span class="function"><span class="title">myfunction</span><span class="params">(para)</span></span>
    <span class="tag">li</span>.classname= para    
<span class="comment">// use</span>
+myfooter
+<span class="function"><span class="title">myfunction</span><span class="params">(<span class="string">"abc"</span>)</span></span>
</code></pre><h3 id="mixin_blocks">mixin blocks</h3><pre><code>mixin product(name)
  .product
    h1= name
    <span class="keyword">if</span> block
      block
    <span class="keyword">else</span>
      <span class="keyword">p</span> <span class="keyword">no</span> product detail

+product(<span class="string">"samsung galaxy III"</span>)
+product(<span class="string">"iphone')
</span>  <span class="keyword">p</span> old <span class="keyword">version</span>
  <span class="keyword">p</span> amazing product
</code></pre><h3 id="Mixin_Attributes">Mixin Attributes</h3><pre><code><span class="comment">//declaration</span>
mixin <span class="function"><span class="title">link</span><span class="params">(href,name)</span></span>
  <span class="comment">//- attributes == {class:"btn"}</span>
  <span class="function"><span class="title">a</span><span class="params">(class!=attributes.class, href=href)</span></span>= name

<span class="comment">//use</span>
+<span class="function"><span class="title">link</span><span class="params">(<span class="string">'/foo'</span>,<span class="string">'foo'</span>)</span><span class="params">(class=<span class="string">'btn'</span>)</span></span>
</code></pre><h3 id="Rest_Arguments">Rest Arguments</h3><pre><code><span class="comment">//declaration</span>
mixin <span class="function"><span class="title">list</span><span class="params">(id, ...items)</span></span>
  <span class="function"><span class="title">ul</span><span class="params">(id=id)</span></span>
    each item <span class="keyword">in</span> items
      li= item
<span class="comment">//to use</span>
+<span class="function"><span class="title">list</span><span class="params">(<span class="string">'mylist'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span>
</code></pre><h2 id="Comments">Comments</h2><ul>
<li>single line comment //same like JS comments</li>
<li>invisible single line comments //-adding a hyphen</li>
<li>block comment, indented after the first line comment</li>
<li>normal HTML style conditional comments , e.g.  <!--[if IE]> 
  script(src='/ie.js') 
  <![endif]-->
</li>
</ul>
<h2 id="Resources">Resources</h2><p><a href="http://jade-lang.com/" target="_blank" rel="external">JADE</a><br><a href="http://naltatis.github.io/jade-syntax-docs/#basics" target="_blank" rel="external">Jade Syntax - interactive demo</a><br><a href="http://segmentfault.com/a/1190000000357534#articleHeader0" target="_blank" rel="external">Segmentfault</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Node Template Engine, a terse language for writing HTML templates, support dynamic code and reusability.</p>
<h1 id="Install]]>
    </summary>
    
      <category term="Jadejs" scheme="http://strong689.github.com/tags/Jadejs/"/>
    
      <category term="Markdown" scheme="http://strong689.github.com/tags/Markdown/"/>
    
      <category term="Jadejs" scheme="http://strong689.github.com/categories/Jadejs/"/>
    
      <category term="Overview" scheme="http://strong689.github.com/categories/Jadejs/Overview/"/>
    
      <category term="Step Into" scheme="http://strong689.github.com/categories/Jadejs/Overview/Step-Into/"/>
    
  </entry>
  
</feed>